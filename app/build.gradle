plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdkVersion 30

    defaultConfig {
        applicationId "dev.esnault.bunpyro"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 21
        versionName "0.4.0-alpha04"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"


        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            applicationIdSuffix ".debug"
        }

        dev {
            initWith(buildTypes.debug)
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
        freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=kotlinx.coroutines.FlowPreview"
        ]
    }

    buildFeatures {
        viewBinding true
        compose true
    }

    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    composeOptions {
        kotlinCompilerExtensionVersion versions.androidx.compose
        kotlinCompilerVersion versions.kotlin
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${versions.kotlin}"

    // AndroidX
    implementation "androidx.appcompat:appcompat:${versions.androidx.appcompat}"
    implementation "androidx.core:core-ktx:${versions.androidx.core}"
    implementation "androidx.preference:preference-ktx:${versions.androidx.preference}"

    // Firebase
    implementation platform("com.google.firebase:firebase-bom:${versions.firebase_bom}")
    implementation "com.google.firebase:firebase-crashlytics-ktx"
    implementation "com.google.firebase:firebase-analytics-ktx"

    // UI
    implementation "androidx.constraintlayout:constraintlayout:${versions.androidx.constraintlayout}"
    implementation "com.google.android.material:material:${versions.material}"
    implementation "com.afollestad.material-dialogs:core:${versions.materialdialogs}"
    implementation "me.saket:better-link-movement-method:${versions.betterlinkmovementmethod}"
    implementation "com.andkulikov:transitionseverywhere:${versions.transitionseverywhere}"

    // Compose
    implementation "androidx.compose.ui:ui:${versions.androidx.compose}"
    implementation "androidx.compose.ui:ui-tooling:${versions.androidx.compose}"
    implementation "androidx.compose.foundation:foundation:${versions.androidx.compose}"
    implementation "androidx.compose.material:material:${versions.androidx.compose}"
    implementation "androidx.compose.runtime:runtime-livedata:${versions.androidx.compose}"
    // implementation "androidx.compose.material:material-icons-core:${versions.androidx.compose}"
    // implementation "androidx.compose.material:material-icons-extended:${versions.androidx.compose}"

    // Architecture components
    implementation "androidx.navigation:navigation-fragment-ktx:${versions.androidx.navigation}"
    implementation "androidx.navigation:navigation-ui-ktx:${versions.androidx.navigation}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${versions.androidx.lifecycle}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${versions.androidx.lifecycle}"

    // DI
    implementation "io.insert-koin:koin-android:${versions.koin}"
    testImplementation "io.insert-koin:koin-test:${versions.koin}"
    implementation "com.jakewharton:process-phoenix:${versions.processPhoenix}"

    // DB
    implementation "androidx.room:room-runtime:${versions.androidx.room}"
    kapt "androidx.room:room-compiler:${versions.androidx.room}"
    implementation "androidx.room:room-ktx:${versions.androidx.room}"
    androidTestImplementation "androidx.room:room-testing:${versions.androidx.room}"

    // Network
    implementation "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    implementation "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    implementation "com.squareup.moshi:moshi-kotlin:${versions.moshi}"
    implementation "com.squareup.moshi:moshi-adapters:${versions.moshi}"
    implementation "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    // Text utils
    implementation "org.jsoup:jsoup:${versions.jsoup}"
    implementation "dev.esnault.wanakana:wanakana-android:${versions.wanakana}"

    // Media
    implementation "com.google.android.exoplayer:exoplayer-core:${versions.exoplayer}"

    // Development
    implementation "com.jakewharton.timber:timber:${versions.timber}"

    // Test
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:${versions.kotlin}"
    testImplementation "junit:junit:${versions.junit}"
    androidTestImplementation "androidx.test:runner:${versions.androidx.test}"
    testImplementation "androidx.room:room-testing:${versions.androidx.room}"
    androidTestImplementation "androidx.test.espresso:espresso-core:${versions.androidx.espresso}"
    androidTestImplementation "androidx.test:rules:${versions.androidx.testrules}"
    androidTestImplementation "androidx.test.ext:junit:${versions.androidx.junit}"
    implementation "androidx.test.espresso:espresso-idling-resource:${versions.androidx.espresso}"
}


def build_param = "${build}"
if (build_param != "dev") {
    // exclude production build
    android.variantFilter { variant ->
        if (variant.buildType.name == 'dev') {
            variant.setIgnore(true)
        }
    }
} else {
    // exclude all except production build
    android.variantFilter { variant ->
        if (variant.buildType.name != 'dev') {
            variant.setIgnore(true)
        }
    }
}
